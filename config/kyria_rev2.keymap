/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
// #include <dt-bindings/zmk/bt.h>
/* &bt (bluetooth) reference
 * BT_CLR	Clear bond information between the keyboard and host for the selected profile.
 * BT_NXT	Switch to the next profile, cycling through to the first one when the end is reached.
 * BT_PRV	Switch to the previous profile, cycling through to the last one when the beginning is reached.
 * BT_SEL	Select the 0-indexed profile by number. Please note: this definition must include a number as an argument in the keymap to work correctly. eg. BT_SEL 0
 */

/ {
// 	// example combos from docs:
// 	combos {
// 		compatible = "zmk,combos";
// 		combo_esc {
// 			timeout-ms = <50>;
// 			key-positions = <0 1>;
// 			bindings = <&kp ESC>;
// 		};
// 	};
	
	keymap {
// no I'm not tabbing these an extra 8-16 characters longer than they already are
compatible = "zmk,keymap";

layer_0 { // the default layer
sensor-bindings = <&inc_dec_kp N O &inc_dec_kp C_VOL_UP C_VOL_DN>; // volume knob on top right corner only - none on left side
bindings = <
// ╭──────────┬──────────┬──────────┬──────────┬──────────┬──────────╮                                               ╭──────────┬──────────┬──────────┬──────────┬──────────┬──────────╮
     &kp TAB     &kp Q      &kp W      &kp E      &kp R      &kp T                                                      &kp Y      &kp U      &kp I      &kp O      &kp P    &kp C_MUTE
// ├──────────┼──────────┼──────────┼──────────┼──────────┼──────────┤                                               ├──────────┼──────────┼──────────┼──────────┼──────────┼──────────┤
     &kp ESC     &kp A      &kp S      &kp D      &kp F      &kp G                                                      &kp H      &kp J      &kp K      &kp L     &kp SEMI   &kp SQT
// ├──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┬──────────╮   ╭──────────┬──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┤
      &mo 1      &kp Z      &kp X      &kp C      &kp V      &kp B    &kp LALT     &none          &none      &none      &kp N      &kp M    &kp COMMA   &kp DOT    &kp FSLH    &mo 2
// ╰──────────┴──────────┴──────────┼──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┼──────────┴──────────┴──────────╯
                                       &none    &kp LMETA   &kp DEL   &kp LSHFT  &kp LCTRL      &kp ENTER  &kp SPACE   &kp BSPC    &none      &none
//                                  ╰──────────┴──────────┴──────────┴──────────┴──────────╯   ╰──────────┴──────────┴──────────┴──────────┴──────────╯
>;
}; // END layer_0

layer_1 { // navigation and numpad
sensor-bindings = <&inc_dec_kp N O &inc_dec_kp C_VOL_UP C_VOL_DN>;
bindings = <
// ╭──────────┬──────────┬──────────┬──────────┬──────────┬──────────╮                                               ╭──────────┬──────────┬──────────┬──────────┬──────────┬──────────╮
      &trans     &none     &kp HOME    &kp UP    &kp END   &kp PG_UP                                                    &none    &kp KP_N7  &kp KP_N8  &kp KP_N9  &kp EQUAL    &trans
// ├──────────┼──────────┼──────────┼──────────┼──────────┼──────────┤                                               ├──────────┼──────────┼──────────┼──────────┼──────────┼──────────┤
      &trans     &none     &kp LEFT   &kp DOWN  &kp RIGHT  &kp PG_DN                                                    &none    &kp KP_N4  &kp KP_N5  &kp KP_N6  &kp MINUS    &none
// ├──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┬──────────╮   ╭──────────┬──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┤
      &trans     &none      &none      &none      &none      &none      &trans     &trans         &trans     &trans   &kp KP_N0  &kp KP_N1  &kp KP_N2  &kp KP_N3   &kp DOT     &trans
// ╰──────────┴──────────┴──────────┼──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┼──────────┴──────────┴──────────╯
                                       &trans     &trans     &trans     &trans     &trans         &trans     &trans     &trans     &trans     &trans
//                                  ╰──────────┴──────────┴──────────┴──────────┴──────────╯   ╰──────────┴──────────┴──────────┴──────────┴──────────╯
>;
}; // END layer_1

layer_2 { // symbols and braces
sensor-bindings = <&inc_dec_kp N O &inc_dec_kp C_VOL_UP C_VOL_DN>;
bindings = <
// TODO: braces (maybe brace where default is left and shift makes right?)
// TODO: symbols
// ╭──────────┬──────────┬──────────┬──────────┬──────────┬──────────╮                                               ╭──────────┬──────────┬──────────┬──────────┬──────────┬──────────╮
      &trans     &none      &none      &none      &none      &none                                                      &none      &none      &none      &none      &none      &trans
// ├──────────┼──────────┼──────────┼──────────┼──────────┼──────────┤                                               ├──────────┼──────────┼──────────┼──────────┼──────────┼──────────┤
      &trans     &none      &none      &none      &none      &none                                                      &none      &none      &none      &none      &none      &none
// ├──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┬──────────╮   ╭──────────┬──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┤
      &trans     &none      &none      &none      &none      &none      &trans     &trans         &trans     &trans     &none      &none      &none      &none      &none      &trans
// ╰──────────┴──────────┴──────────┼──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┼──────────┴──────────┴──────────╯
                                       &trans     &trans     &trans     &trans     &trans         &trans     &trans     &trans     &trans     &trans
//                                  ╰──────────┴──────────┴──────────┴──────────┴──────────╯   ╰──────────┴──────────┴──────────┴──────────┴──────────╯
>;
}; // END layer_2

// example conditional layers from docs:
conditional_layers {
	compatible = "zmk,conditional-layers";
	tri_layer {
		if-layers = <1 2>;
		then-layer = <3>;
	};
};

layer_3 { // funciton keys and others
sensor-bindings = <&inc_dec_kp N O &inc_dec_kp C_VOL_UP C_VOL_DN>;
bindings = <
// TODO: Function keys and obscure stuff like printscreen/brightness/insert
// ╭──────────┬──────────┬──────────┬──────────┬──────────┬──────────╮                                               ╭──────────┬──────────┬──────────┬──────────┬──────────┬──────────╮
      &trans     &none      &none      &none      &none      &none                                                      &none      &none      &none      &none      &none      &trans
// ├──────────┼──────────┼──────────┼──────────┼──────────┼──────────┤                                               ├──────────┼──────────┼──────────┼──────────┼──────────┼──────────┤
      &trans     &none      &none      &none      &none      &none                                                      &none      &none      &none      &none      &none      &none
// ├──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┬──────────╮   ╭──────────┬──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┤
      &trans     &none      &none      &none      &none      &none      &trans     &trans         &trans     &trans     &none      &none      &none      &none      &none      &trans
// ╰──────────┴──────────┴──────────┼──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┼──────────┴──────────┴──────────╯
                                       &trans     &trans     &trans     &trans     &trans         &trans     &trans     &trans     &trans     &trans
//                                  ╰──────────┴──────────┴──────────┴──────────┴──────────╯   ╰──────────┴──────────┴──────────┴──────────┴──────────╯
>;
}; // END layer_3

}; // END keymap
}; // END /
